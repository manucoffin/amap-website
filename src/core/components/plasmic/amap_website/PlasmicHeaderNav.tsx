// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CzphteDn95cERg7nN7EAF
// Component: gY1crScWzn
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_amap_website.module.css'; // plasmic-import: 7CzphteDn95cERg7nN7EAF/projectcss
import sty from './PlasmicHeaderNav.module.css'; // plasmic-import: gY1crScWzn/css

export type PlasmicHeaderNav__VariantMembers = {};

export type PlasmicHeaderNav__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderNav__VariantsArgs;
export const PlasmicHeaderNav__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderNav__ArgsType = {};
type ArgPropType = keyof PlasmicHeaderNav__ArgsType;
export const PlasmicHeaderNav__ArgProps = new Array<ArgPropType>();

export type PlasmicHeaderNav__OverridesType = {
  root?: p.Flex<'div'>;
};

export interface DefaultHeaderNavProps {
  className?: string;
}

function PlasmicHeaderNav__RenderFunc(props: {
  variants: PlasmicHeaderNav__VariantsArgs;
  args: PlasmicHeaderNav__ArgsType;
  overrides: PlasmicHeaderNav__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, projectcss.__wab_text, sty.text__uhAck)}>
        {'Actus'}
      </div>

      <div className={classNames(projectcss.all, projectcss.__wab_text, sty.text___5OpN)}>
        {'Contrats'}
      </div>

      <div className={classNames(projectcss.all, projectcss.__wab_text, sty.text__mEF)}>
        {'Contact'}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderNav__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderNav__VariantsArgs;
    args?: PlasmicHeaderNav__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderNav__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeaderNav__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeaderNav__ArgProps,
      internalVariantPropNames: PlasmicHeaderNav__VariantProps,
    });

    return PlasmicHeaderNav__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicHeaderNav';
  } else {
    func.displayName = `PlasmicHeaderNav.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderNav = Object.assign(
  // Top-level PlasmicHeaderNav renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHeaderNav
    internalVariantProps: PlasmicHeaderNav__VariantProps,
    internalArgProps: PlasmicHeaderNav__ArgProps,
  }
);

export default PlasmicHeaderNav;
/* prettier-ignore-end */
