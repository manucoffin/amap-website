// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CzphteDn95cERg7nN7EAF
// Component: 0HaKbtsrpU
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Header from '../../Header'; // plasmic-import: dTKTvnUQf8/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_amap_website.module.css'; // plasmic-import: 7CzphteDn95cERg7nN7EAF/projectcss
import sty from './PlasmicSitemap.module.css'; // plasmic-import: 0HaKbtsrpU/css

export type PlasmicSitemap__VariantMembers = {};

export type PlasmicSitemap__VariantsArgs = {};
type VariantPropType = keyof PlasmicSitemap__VariantsArgs;
export const PlasmicSitemap__VariantProps = new Array<VariantPropType>();

export type PlasmicSitemap__ArgsType = {};
type ArgPropType = keyof PlasmicSitemap__ArgsType;
export const PlasmicSitemap__ArgProps = new Array<ArgPropType>();

export type PlasmicSitemap__OverridesType = {
  root?: p.Flex<'div'>;
  header?: p.Flex<typeof Header>;
  h1?: p.Flex<'h1'>;
  staticPages?: p.Flex<'div'>;
  articles?: p.Flex<'div'>;
  contracts?: p.Flex<'div'>;
};

export interface DefaultSitemapProps {}

function PlasmicSitemap__RenderFunc(props: {
  variants: PlasmicSitemap__VariantsArgs;
  args: PlasmicSitemap__ArgsType;
  overrides: PlasmicSitemap__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={'header'}
            data-plasmic-override={overrides.header}
            className={classNames('__wab_instance', sty.header)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__dKgMs)}>
            <h1
              data-plasmic-name={'h1'}
              data-plasmic-override={overrides.h1}
              className={classNames(projectcss.all, projectcss.h1, projectcss.__wab_text, sty.h1)}
            >
              {'Plan du Site'}
            </h1>

            <p.Stack
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cUf01)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__yE05A)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__k9RKi
                  )}
                >
                  {'Pages'}
                </h2>

                <div
                  data-plasmic-name={'staticPages'}
                  data-plasmic-override={overrides.staticPages}
                  className={classNames(projectcss.all, projectcss.__wab_text, sty.staticPages)}
                >
                  {'Enter some text'}
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__bp2Va)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__mGzH
                  )}
                >
                  {'Actualit√©s'}
                </h2>

                <div
                  data-plasmic-name={'articles'}
                  data-plasmic-override={overrides.articles}
                  className={classNames(projectcss.all, projectcss.__wab_text, sty.articles)}
                >
                  {'Enter some text'}
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox___6DKqX)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__glsBo
                  )}
                >
                  {'Contrats'}
                </h2>

                <div
                  data-plasmic-name={'contracts'}
                  data-plasmic-override={overrides.contracts}
                  className={classNames(projectcss.all, projectcss.__wab_text, sty.contracts)}
                >
                  {'Enter some text'}
                </div>
              </div>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'header', 'h1', 'staticPages', 'articles', 'contracts'],
  header: ['header'],
  h1: ['h1'],
  staticPages: ['staticPages'],
  articles: ['articles'],
  contracts: ['contracts'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  header: typeof Header;
  h1: 'h1';
  staticPages: 'div';
  articles: 'div';
  contracts: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSitemap__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSitemap__VariantsArgs;
    args?: PlasmicSitemap__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSitemap__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSitemap__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSitemap__ArgProps,
      internalVariantPropNames: PlasmicSitemap__VariantProps,
    });

    return PlasmicSitemap__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicSitemap';
  } else {
    func.displayName = `PlasmicSitemap.${nodeName}`;
  }
  return func;
}

export const PlasmicSitemap = Object.assign(
  // Top-level PlasmicSitemap renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent('header'),
    h1: makeNodeComponent('h1'),
    staticPages: makeNodeComponent('staticPages'),
    articles: makeNodeComponent('articles'),
    contracts: makeNodeComponent('contracts'),

    // Metadata about props expected for PlasmicSitemap
    internalVariantProps: PlasmicSitemap__VariantProps,
    internalArgProps: PlasmicSitemap__ArgProps,
  }
);

export default PlasmicSitemap;
/* prettier-ignore-end */
