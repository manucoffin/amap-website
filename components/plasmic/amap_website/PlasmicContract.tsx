// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CzphteDn95cERg7nN7EAF
// Component: _KwHMp6Wow
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: dTKTvnUQf8/component

import { useScreenVariants as useScreenVariantshaBl5ZeVufY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HABl5zeVufY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_amap_website.module.css"; // plasmic-import: 7CzphteDn95cERg7nN7EAF/projectcss
import sty from "./PlasmicContract.module.css"; // plasmic-import: _KwHMp6Wow/css

export type PlasmicContract__VariantMembers = {};

export type PlasmicContract__VariantsArgs = {};
type VariantPropType = keyof PlasmicContract__VariantsArgs;
export const PlasmicContract__VariantProps = new Array<VariantPropType>();

export type PlasmicContract__ArgsType = {
  description?: React.ReactNode;
  title?: React.ReactNode;
};

type ArgPropType = keyof PlasmicContract__ArgsType;
export const PlasmicContract__ArgProps = new Array<ArgPropType>(
  "description",
  "title"
);

export type PlasmicContract__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  image?: p.Flex<typeof p.PlasmicImg>;
  downloadButton?: p.Flex<"a"> & Partial<LinkProps>;
  text?: p.Flex<"div">;
  description?: p.Flex<"div">;
};

export interface DefaultContractProps {}

function PlasmicContract__RenderFunc(props: {
  variants: PlasmicContract__VariantsArgs;
  args: PlasmicContract__ArgsType;
  overrides: PlasmicContract__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshaBl5ZeVufY()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"AMAP de la Goutte d'Eau - Contrat"}</title>
        <meta
          key="og:title"
          property="og:title"
          content={"AMAP de la Goutte d'Eau - Contrat"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(projectcss.all, projectcss.h1, sty.h1)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Nom du contrat",
                value: args.title
              })}
            </h1>

            <p.PlasmicImg
              data-plasmic-name={"image"}
              data-plasmic-override={overrides.image}
              alt={""}
              className={classNames(sty.image)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/amap_website/images/contractIcon.png",
                fullWidth: 512,
                fullHeight: 512,
                aspectRatio: undefined
              }}
            />

            <p.PlasmicLink
              data-plasmic-name={"downloadButton"}
              data-plasmic-override={overrides.downloadButton}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.downloadButton
              )}
              component={Link}
              platform={"nextjs"}
            >
              {hasVariant(globalVariants, "screen", "sm")
                ? "Laissez-nous un petit mot "
                : hasVariant(globalVariants, "screen", "md")
                ? "Laissez-nous un petit mot "
                : "Télécharger le contrat"}
            </p.PlasmicLink>

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"À propos de ce contrat"}
            </div>

            <div
              data-plasmic-name={"description"}
              data-plasmic-override={overrides.description}
              className={classNames(projectcss.all, sty.description)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  'L’adhésion est valable sur une année civile, du 1er janvier au 31 décembre. Son montant, libre, est au minimum de 10 euros.\n\nPour tout nouvel adhérent, et uniquement dans ce cas, à partir du mois de septembre de l’année en cours (début des contrats pommes), le montant de l’adhésion est fixé à 5€.\n\nPour les adhésions et ré-adhésions, à partir du 15 novembre, l’adhésion de 10€ court pour l’année civile suivante.\n\nCette adhésion est destinée à couvrir les frais de fonctionnement de l’association.\n\nElle doit être obligatoirement payée avant la signature du premier contrat et en début d’année civile pour les producteurs.\n\nEn cas de partage de paniers, chaque "co-panier" adhère individuellement à l’association.\n\nL’adhésion et le chèque à l’ordre de l’AMAP peuvent être apportés sous le préau ou envoyés à la trésorière dont les coordonnées paraissent en bas du bulletin.',
                value: args.description,
                className: classNames(sty.slotTargetDescription)
              })}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "freeBox",
    "h1",
    "image",
    "downloadButton",
    "text",
    "description"
  ],
  header: ["header"],
  freeBox: ["freeBox", "h1", "image", "downloadButton", "text", "description"],
  h1: ["h1"],
  image: ["image"],
  downloadButton: ["downloadButton"],
  text: ["text"],
  description: ["description"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  freeBox: "div";
  h1: "h1";
  image: typeof p.PlasmicImg;
  downloadButton: "a";
  text: "div";
  description: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContract__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContract__VariantsArgs;
    args?: PlasmicContract__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContract__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContract__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContract__ArgProps,
      internalVariantPropNames: PlasmicContract__VariantProps
    });

    return PlasmicContract__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContract";
  } else {
    func.displayName = `PlasmicContract.${nodeName}`;
  }
  return func;
}

export const PlasmicContract = Object.assign(
  // Top-level PlasmicContract renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    image: makeNodeComponent("image"),
    downloadButton: makeNodeComponent("downloadButton"),
    text: makeNodeComponent("text"),
    description: makeNodeComponent("description"),

    // Metadata about props expected for PlasmicContract
    internalVariantProps: PlasmicContract__VariantProps,
    internalArgProps: PlasmicContract__ArgProps
  }
);

export default PlasmicContract;
/* prettier-ignore-end */
