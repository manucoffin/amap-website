// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CzphteDn95cERg7nN7EAF
// Component: 6mDHqpDUxe
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Header from '../../Header'; // plasmic-import: dTKTvnUQf8/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_amap_website.module.css'; // plasmic-import: 7CzphteDn95cERg7nN7EAF/projectcss
import sty from './PlasmicContact.module.css'; // plasmic-import: 6mDHqpDUxe/css

export type PlasmicContact__VariantMembers = {};

export type PlasmicContact__VariantsArgs = {};
type VariantPropType = keyof PlasmicContact__VariantsArgs;
export const PlasmicContact__VariantProps = new Array<VariantPropType>();

export type PlasmicContact__ArgsType = {
  schedule?: React.ReactNode;
  address?: React.ReactNode;
  postCode?: React.ReactNode;
  city?: React.ReactNode;
};

type ArgPropType = keyof PlasmicContact__ArgsType;
export const PlasmicContact__ArgProps = new Array<ArgPropType>(
  'schedule',
  'address',
  'postCode',
  'city'
);

export type PlasmicContact__OverridesType = {
  root?: p.Flex<'div'>;
  header?: p.Flex<typeof Header>;
  h1?: p.Flex<'h1'>;
  email?: p.Flex<'div'>;
  phone?: p.Flex<'div'>;
  addressInfos?: p.Flex<'div'>;
};

export interface DefaultContactProps {}

function PlasmicContact__RenderFunc(props: {
  variants: PlasmicContact__VariantsArgs;
  args: PlasmicContact__ArgsType;
  overrides: PlasmicContact__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"AMAP de la Goutte d'Eau - Contact"}</title>
        <meta key="og:title" property="og:title" content={"AMAP de la Goutte d'Eau - Contact"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={'header'}
            data-plasmic-override={overrides.header}
            className={classNames('__wab_instance', sty.header)}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__grGkp)}>
              <h1
                data-plasmic-name={'h1'}
                data-plasmic-override={overrides.h1}
                className={classNames(projectcss.all, projectcss.h1, projectcss.__wab_text, sty.h1)}
              >
                {'Envie de discuter ?'}
              </h1>

              <div className={classNames(projectcss.all, sty.freeBox___33Za)}>
                <p.PlasmicImg
                  alt={''}
                  className={classNames(sty.img__l8Qw5)}
                  displayHeight={'100px' as const}
                  displayMaxHeight={'none' as const}
                  displayMaxWidth={'100%' as const}
                  displayMinHeight={'0' as const}
                  displayMinWidth={'0' as const}
                  displayWidth={'100px' as const}
                  loading={'lazy' as const}
                  src={{
                    src: '/plasmic/amap_website/images/paperPlaneIcon.png',
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined,
                  }}
                />

                <div
                  className={classNames(projectcss.all, projectcss.__wab_text, sty.text___0Jl4Z)}
                >
                  {'Laissez-nous un petit mot '}
                </div>

                <div
                  data-plasmic-name={'email'}
                  data-plasmic-override={overrides.email}
                  className={classNames(projectcss.all, projectcss.__wab_text, sty.email)}
                >
                  {'amap-goutte-eau@test.fr'}
                </div>

                <p.PlasmicImg
                  alt={''}
                  className={classNames(sty.img___5Khuj)}
                  displayHeight={'100px' as const}
                  displayMaxHeight={'none' as const}
                  displayMaxWidth={'100%' as const}
                  displayMinHeight={'0' as const}
                  displayMinWidth={'0' as const}
                  displayWidth={'100px' as const}
                  loading={'lazy' as const}
                  src={{
                    src: '/plasmic/amap_website/images/phoneIcon.png',
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined,
                  }}
                />

                <div className={classNames(projectcss.all, projectcss.__wab_text, sty.text__w8G0I)}>
                  {'Faites nous entendre votre voix'}
                </div>

                <div
                  data-plasmic-name={'phone'}
                  data-plasmic-override={overrides.phone}
                  className={classNames(projectcss.all, projectcss.__wab_text, sty.phone)}
                >
                  {'02 34 56 78 90'}
                </div>

                <p.PlasmicImg
                  alt={''}
                  className={classNames(sty.img___9UsEl)}
                  displayHeight={'100px' as const}
                  displayMaxHeight={'none' as const}
                  displayMaxWidth={'100%' as const}
                  displayMinHeight={'0' as const}
                  displayMinWidth={'0' as const}
                  displayWidth={'100px' as const}
                  loading={'lazy' as const}
                  src={{
                    src: '/plasmic/amap_website/images/mapIcon.png',
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined,
                  }}
                />

                <div className={classNames(projectcss.all, projectcss.__wab_text, sty.text__kt2Xc)}>
                  {'venez nous rencontrer !'}
                </div>

                {true ? (
                  <div
                    data-plasmic-name={'addressInfos'}
                    data-plasmic-override={overrides.addressInfos}
                    className={classNames(projectcss.all, sty.addressInfos)}
                  >
                    <div className={classNames(projectcss.all, sty.freeBox___5QtE)}>
                      {p.renderPlasmicSlot({
                        defaultContents: 'Tous les lundis de 18h Ã  20h',
                        value: args.schedule,
                        className: classNames(sty.slotTargetSchedule),
                      })}
                    </div>

                    <div className={classNames(projectcss.all, sty.freeBox__itwZt)}>
                      {p.renderPlasmicSlot({
                        defaultContents: '12 rue Grandmaison',
                        value: args.address,
                        className: classNames(sty.slotTargetAddress),
                      })}
                    </div>

                    {true ? (
                      <p.Stack
                        as={'div'}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.freeBox__btpo0)}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: '12345',
                          value: args.postCode,
                          className: classNames(sty.slotTargetPostCode),
                        })}

                        <div className={classNames(projectcss.all, sty.freeBox__ebdkx)}>
                          {p.renderPlasmicSlot({
                            defaultContents: "Ville sur l'authion",
                            value: args.city,
                            className: classNames(sty.slotTargetCity),
                          })}
                        </div>
                      </p.Stack>
                    ) : null}
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'header', 'h1', 'email', 'phone', 'addressInfos'],
  header: ['header'],
  h1: ['h1'],
  email: ['email'],
  phone: ['phone'],
  addressInfos: ['addressInfos'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  header: typeof Header;
  h1: 'h1';
  email: 'div';
  phone: 'div';
  addressInfos: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContact__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContact__VariantsArgs;
    args?: PlasmicContact__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContact__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContact__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContact__ArgProps,
      internalVariantPropNames: PlasmicContact__VariantProps,
    });

    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicContact';
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent('header'),
    h1: makeNodeComponent('h1'),
    email: makeNodeComponent('email'),
    phone: makeNodeComponent('phone'),
    addressInfos: makeNodeComponent('addressInfos'),

    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps,
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
