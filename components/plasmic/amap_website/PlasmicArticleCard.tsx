// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CzphteDn95cERg7nN7EAF
// Component: 6W6tImoBwf
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantshaBl5ZeVufY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HABl5zeVufY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_amap_website.module.css"; // plasmic-import: 7CzphteDn95cERg7nN7EAF/projectcss
import sty from "./PlasmicArticleCard.module.css"; // plasmic-import: 6W6tImoBwf/css

export type PlasmicArticleCard__VariantMembers = {
  horizontal: "horizontal";
};

export type PlasmicArticleCard__VariantsArgs = {
  horizontal?: SingleBooleanChoiceArg<"horizontal">;
};

type VariantPropType = keyof PlasmicArticleCard__VariantsArgs;
export const PlasmicArticleCard__VariantProps = new Array<VariantPropType>(
  "horizontal"
);

export type PlasmicArticleCard__ArgsType = {
  title?: React.ReactNode;
  date?: React.ReactNode;
  abstract?: React.ReactNode;
};

type ArgPropType = keyof PlasmicArticleCard__ArgsType;
export const PlasmicArticleCard__ArgProps = new Array<ArgPropType>(
  "title",
  "date",
  "abstract"
);

export type PlasmicArticleCard__OverridesType = {
  root?: p.Flex<"div">;
  thumbnail?: p.Flex<"div">;
  goToDetailLink?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultArticleCardProps {
  title?: React.ReactNode;
  date?: React.ReactNode;
  abstract?: React.ReactNode;
  horizontal?: SingleBooleanChoiceArg<"horizontal">;
  className?: string;
}

function PlasmicArticleCard__RenderFunc(props: {
  variants: PlasmicArticleCard__VariantsArgs;
  args: PlasmicArticleCard__ArgsType;
  overrides: PlasmicArticleCard__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshaBl5ZeVufY()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.roothorizontal]: hasVariant(variants, "horizontal", "horizontal")
        }
      )}
    >
      <div
        data-plasmic-name={"thumbnail"}
        data-plasmic-override={overrides.thumbnail}
        className={classNames(projectcss.all, sty.thumbnail, {
          [sty.thumbnailhorizontal]: hasVariant(
            variants,
            "horizontal",
            "horizontal"
          )
        })}
        loading={"lazy" as const}
      />

      {true ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__qW8Fy, {
            [sty.freeBoxhorizontal__qW8Fyzc7Xk]: hasVariant(
              variants,
              "horizontal",
              "horizontal"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___9Le0E, {
              [sty.freeBoxhorizontal___9Le0Ezc7Xk]: hasVariant(
                variants,
                "horizontal",
                "horizontal"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Titre de l'article",
              value: args.title,
              className: classNames(sty.slotTargetTitle, {
                [sty.slotTargetTitlehorizontal]: hasVariant(
                  variants,
                  "horizontal",
                  "horizontal"
                )
              })
            })}
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__ubBr, {
              [sty.freeBoxhorizontal__ubBrzc7Xk]: hasVariant(
                variants,
                "horizontal",
                "horizontal"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Publié le 12/05/2022",
              value: args.date,
              className: classNames(sty.slotTargetDate, {
                [sty.slotTargetDatehorizontal]: hasVariant(
                  variants,
                  "horizontal",
                  "horizontal"
                )
              })
            })}
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__evEzu, {
              [sty.freeBoxhorizontal__evEzuzc7Xk]: hasVariant(
                variants,
                "horizontal",
                "horizontal"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "Les 3 premières lignes de l'article, qui résument ce qu'il se raconte dedans...",
              value: args.abstract,
              className: classNames(sty.slotTargetAbstract, {
                [sty.slotTargetAbstracthorizontal]: hasVariant(
                  variants,
                  "horizontal",
                  "horizontal"
                )
              })
            })}
          </div>

          <p.PlasmicLink
            data-plasmic-name={"goToDetailLink"}
            data-plasmic-override={overrides.goToDetailLink}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.goToDetailLink
            )}
            component={Link}
            href={"https://www.plasmic.app/" as const}
            platform={"nextjs"}
          >
            {"Lire la suite"}
          </p.PlasmicLink>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "thumbnail", "goToDetailLink"],
  thumbnail: ["thumbnail"],
  goToDetailLink: ["goToDetailLink"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  thumbnail: "div";
  goToDetailLink: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticleCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticleCard__VariantsArgs;
    args?: PlasmicArticleCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticleCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicArticleCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicArticleCard__ArgProps,
      internalVariantPropNames: PlasmicArticleCard__VariantProps
    });

    return PlasmicArticleCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticleCard";
  } else {
    func.displayName = `PlasmicArticleCard.${nodeName}`;
  }
  return func;
}

export const PlasmicArticleCard = Object.assign(
  // Top-level PlasmicArticleCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    thumbnail: makeNodeComponent("thumbnail"),
    goToDetailLink: makeNodeComponent("goToDetailLink"),

    // Metadata about props expected for PlasmicArticleCard
    internalVariantProps: PlasmicArticleCard__VariantProps,
    internalArgProps: PlasmicArticleCard__ArgProps
  }
);

export default PlasmicArticleCard;
/* prettier-ignore-end */
