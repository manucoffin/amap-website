// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CzphteDn95cERg7nN7EAF
// Component: IPO3E1dkvS
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_amap_website.module.css'; // plasmic-import: 7CzphteDn95cERg7nN7EAF/projectcss
import sty from './PlasmicAmapAdvantageBlock.module.css'; // plasmic-import: IPO3E1dkvS/css

export type PlasmicAmapAdvantageBlock__VariantMembers = {};

export type PlasmicAmapAdvantageBlock__VariantsArgs = {};
type VariantPropType = keyof PlasmicAmapAdvantageBlock__VariantsArgs;
export const PlasmicAmapAdvantageBlock__VariantProps = new Array<VariantPropType>();

export type PlasmicAmapAdvantageBlock__ArgsType = {
  title?: React.ReactNode;
  image?: React.ReactNode;
  description?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAmapAdvantageBlock__ArgsType;
export const PlasmicAmapAdvantageBlock__ArgProps = new Array<ArgPropType>(
  'title',
  'image',
  'description'
);

export type PlasmicAmapAdvantageBlock__OverridesType = {
  root?: p.Flex<'div'>;
};

export interface DefaultAmapAdvantageBlockProps {
  title?: React.ReactNode;
  image?: React.ReactNode;
  description?: React.ReactNode;
  className?: string;
}

function PlasmicAmapAdvantageBlock__RenderFunc(props: {
  variants: PlasmicAmapAdvantageBlock__VariantsArgs;
  args: PlasmicAmapAdvantageBlock__ArgsType;
  overrides: PlasmicAmapAdvantageBlock__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <p.PlasmicImg
            alt={''}
            className={classNames(sty.img__e1SOt)}
            displayHeight={'128px' as const}
            displayMaxHeight={'none' as const}
            displayMaxWidth={'100%' as const}
            displayMinHeight={'0' as const}
            displayMinWidth={'0' as const}
            displayWidth={'128px' as const}
            loading={'lazy' as const}
            src={{
              src: '/plasmic/amap_website/images/vegetablesBasketIcon.png',
              fullWidth: 256,
              fullHeight: 256,
              aspectRatio: undefined,
            }}
          />
        ),

        value: args.image,
      })}

      <div className={classNames(projectcss.all, sty.freeBox__v90Ma)}>
        {p.renderPlasmicSlot({
          defaultContents: 'Pour manger mieux',
          value: args.title,
          className: classNames(sty.slotTargetTitle),
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__e3E4B)}>
        {p.renderPlasmicSlot({
          defaultContents:
            'Les paniers sont composés de produits frais et de saison, ce qui assure une meilleure qualité nutritive. De plus, des produits bios, et donc sans pesticides sont meilleurs pour la santé.',
          value: args.description,
          className: classNames(sty.slotTargetDescription),
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAmapAdvantageBlock__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAmapAdvantageBlock__VariantsArgs;
    args?: PlasmicAmapAdvantageBlock__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAmapAdvantageBlock__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAmapAdvantageBlock__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAmapAdvantageBlock__ArgProps,
      internalVariantPropNames: PlasmicAmapAdvantageBlock__VariantProps,
    });

    return PlasmicAmapAdvantageBlock__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicAmapAdvantageBlock';
  } else {
    func.displayName = `PlasmicAmapAdvantageBlock.${nodeName}`;
  }
  return func;
}

export const PlasmicAmapAdvantageBlock = Object.assign(
  // Top-level PlasmicAmapAdvantageBlock renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicAmapAdvantageBlock
    internalVariantProps: PlasmicAmapAdvantageBlock__VariantProps,
    internalArgProps: PlasmicAmapAdvantageBlock__ArgProps,
  }
);

export default PlasmicAmapAdvantageBlock;
/* prettier-ignore-end */
