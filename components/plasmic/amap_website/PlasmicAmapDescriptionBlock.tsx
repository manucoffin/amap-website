// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CzphteDn95cERg7nN7EAF
// Component: uZnVkj7Gzvz
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ListItem from "../../ListItem"; // plasmic-import: 6y2iAxc2rc/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_amap_website.module.css"; // plasmic-import: 7CzphteDn95cERg7nN7EAF/projectcss
import sty from "./PlasmicAmapDescriptionBlock.module.css"; // plasmic-import: uZnVkj7Gzvz/css

import BrushIcon from "./icons/PlasmicIcon__Brush"; // plasmic-import: 7RNqhMDlZ/icon

export type PlasmicAmapDescriptionBlock__VariantMembers = {};

export type PlasmicAmapDescriptionBlock__VariantsArgs = {};
type VariantPropType = keyof PlasmicAmapDescriptionBlock__VariantsArgs;
export const PlasmicAmapDescriptionBlock__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAmapDescriptionBlock__ArgsType = {
  children?: React.ReactNode;
  title?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAmapDescriptionBlock__ArgsType;
export const PlasmicAmapDescriptionBlock__ArgProps = new Array<ArgPropType>(
  "children",
  "title"
);

export type PlasmicAmapDescriptionBlock__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  ul?: p.Flex<"ul">;
};

export interface DefaultAmapDescriptionBlockProps {
  children?: React.ReactNode;
  title?: React.ReactNode;
  className?: string;
}

function PlasmicAmapDescriptionBlock__RenderFunc(props: {
  variants: PlasmicAmapDescriptionBlock__VariantsArgs;
  args: PlasmicAmapDescriptionBlock__ArgsType;
  overrides: PlasmicAmapDescriptionBlock__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <BrushIcon
                className={classNames(projectcss.all, sty.svg__fpYPs)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sS8E
                )}
              >
                {"Solidaire"}
              </div>
            </React.Fragment>
          ),
          value: args.title
        })}
      </div>

      <p.Stack
        as={"ul"}
        data-plasmic-name={"ul"}
        data-plasmic-override={overrides.ul}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.ul, sty.ul)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  sty.li__msfYk
                )}
              >
                <ListItem
                  className={classNames("__wab_instance", sty.listItem__mGkDp)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7Wr43
                    )}
                  >
                    {"Avec les producteurs"}
                  </div>
                </ListItem>
              </li>

              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  sty.li__qbcx9
                )}
              >
                <ListItem
                  className={classNames("__wab_instance", sty.listItem__lti77)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qrGv9
                    )}
                  >
                    {
                      "liens actifs avec tous les acteurs locaux oeuvrant pour le maintien de l’agriculture durable et d’un commerce solidaire"
                    }
                  </div>
                </ListItem>
              </li>

              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  sty.li__jKDeD
                )}
              >
                <ListItem
                  className={classNames("__wab_instance", sty.listItem___6SxMq)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cdBiA
                    )}
                  >
                    {"L’accompagnement du producteur à l’autonomie"}
                  </div>
                </ListItem>
              </li>

              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  sty.li___2ID
                )}
              >
                <ListItem
                  className={classNames("__wab_instance", sty.listItem__wxcOr)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__px9Wx
                    )}
                  >
                    {
                      "La définition à chaque saison d’un prix équitable entre producteur et consommateurs"
                    }
                  </div>
                </ListItem>
              </li>
            </React.Fragment>
          ),
          value: args.children
        })}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "ul"],
  freeBox: ["freeBox"],
  ul: ["ul"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  ul: "ul";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAmapDescriptionBlock__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAmapDescriptionBlock__VariantsArgs;
    args?: PlasmicAmapDescriptionBlock__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAmapDescriptionBlock__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAmapDescriptionBlock__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAmapDescriptionBlock__ArgProps,
      internalVariantPropNames: PlasmicAmapDescriptionBlock__VariantProps
    });

    return PlasmicAmapDescriptionBlock__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAmapDescriptionBlock";
  } else {
    func.displayName = `PlasmicAmapDescriptionBlock.${nodeName}`;
  }
  return func;
}

export const PlasmicAmapDescriptionBlock = Object.assign(
  // Top-level PlasmicAmapDescriptionBlock renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    ul: makeNodeComponent("ul"),

    // Metadata about props expected for PlasmicAmapDescriptionBlock
    internalVariantProps: PlasmicAmapDescriptionBlock__VariantProps,
    internalArgProps: PlasmicAmapDescriptionBlock__ArgProps
  }
);

export default PlasmicAmapDescriptionBlock;
/* prettier-ignore-end */
