// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CzphteDn95cERg7nN7EAF
// Component: 3e8PB83RLm
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Header from '../../Header'; // plasmic-import: dTKTvnUQf8/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_amap_website.module.css'; // plasmic-import: 7CzphteDn95cERg7nN7EAF/projectcss
import sty from './PlasmicNewsArticle.module.css'; // plasmic-import: 3e8PB83RLm/css

export type PlasmicNewsArticle__VariantMembers = {};

export type PlasmicNewsArticle__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewsArticle__VariantsArgs;
export const PlasmicNewsArticle__VariantProps = new Array<VariantPropType>();

export type PlasmicNewsArticle__ArgsType = {
  title?: React.ReactNode;
  publicationDate?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNewsArticle__ArgsType;
export const PlasmicNewsArticle__ArgProps = new Array<ArgPropType>('title', 'publicationDate');

export type PlasmicNewsArticle__OverridesType = {
  root?: p.Flex<'div'>;
  header?: p.Flex<typeof Header>;
  article?: p.Flex<'article'>;
  h1?: p.Flex<'h1'>;
  freeBox?: p.Flex<'div'>;
  cover?: p.Flex<'div'>;
  content?: p.Flex<'div'>;
};

export interface DefaultNewsArticleProps {}

function PlasmicNewsArticle__RenderFunc(props: {
  variants: PlasmicNewsArticle__VariantsArgs;
  args: PlasmicNewsArticle__ArgsType;
  overrides: PlasmicNewsArticle__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"AMAP de la Goutte d'Eau - Article"}</title>
        <meta key="og:title" property="og:title" content={"AMAP de la Goutte d'Eau - Article"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={'header'}
            data-plasmic-override={overrides.header}
            className={classNames('__wab_instance', sty.header)}
          />

          <article
            data-plasmic-name={'article'}
            data-plasmic-override={overrides.article}
            className={classNames(projectcss.all, sty.article)}
          >
            <h1
              data-plasmic-name={'h1'}
              data-plasmic-override={overrides.h1}
              className={classNames(projectcss.all, projectcss.h1, sty.h1)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Titre de l'article",
                value: args.title,
              })}
            </h1>

            <div
              data-plasmic-name={'freeBox'}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              {p.renderPlasmicSlot({
                defaultContents: 'Publi√© le 12/05/2022',
                value: args.publicationDate,
                className: classNames(sty.slotTargetPublicationDate),
              })}
            </div>

            <div
              data-plasmic-name={'cover'}
              data-plasmic-override={overrides.cover}
              className={classNames(projectcss.all, sty.cover)}
            />

            <div
              data-plasmic-name={'content'}
              data-plasmic-override={overrides.content}
              className={classNames(projectcss.all, sty.content)}
            />
          </article>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'header', 'article', 'h1', 'freeBox', 'cover', 'content'],
  header: ['header'],
  article: ['article', 'h1', 'freeBox', 'cover', 'content'],
  h1: ['h1'],
  freeBox: ['freeBox'],
  cover: ['cover'],
  content: ['content'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  header: typeof Header;
  article: 'article';
  h1: 'h1';
  freeBox: 'div';
  cover: 'div';
  content: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewsArticle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewsArticle__VariantsArgs;
    args?: PlasmicNewsArticle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewsArticle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewsArticle__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNewsArticle__ArgProps,
      internalVariantPropNames: PlasmicNewsArticle__VariantProps,
    });

    return PlasmicNewsArticle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNewsArticle';
  } else {
    func.displayName = `PlasmicNewsArticle.${nodeName}`;
  }
  return func;
}

export const PlasmicNewsArticle = Object.assign(
  // Top-level PlasmicNewsArticle renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent('header'),
    article: makeNodeComponent('article'),
    h1: makeNodeComponent('h1'),
    freeBox: makeNodeComponent('freeBox'),
    cover: makeNodeComponent('cover'),
    content: makeNodeComponent('content'),

    // Metadata about props expected for PlasmicNewsArticle
    internalVariantProps: PlasmicNewsArticle__VariantProps,
    internalArgProps: PlasmicNewsArticle__ArgProps,
  }
);

export default PlasmicNewsArticle;
/* prettier-ignore-end */
